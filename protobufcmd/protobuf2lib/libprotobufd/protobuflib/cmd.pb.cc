// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd.proto

#include "cmd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace mycmd {
}  // namespace mycmd
namespace mycmd {
bool cmd_code_IsValid(int value) {
  switch (value) {
    case 65000:
    case 65001:
    case 65002:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> cmd_code_strings[3] = {};

static const char cmd_code_names[] =
  "cmd_heart"
  "cmd_rcode"
  "cmd_security";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry cmd_code_entries[] = {
  { {cmd_code_names + 0, 9}, 65000 },
  { {cmd_code_names + 9, 9}, 65001 },
  { {cmd_code_names + 18, 12}, 65002 },
};

static const int cmd_code_entries_by_number[] = {
  0, // 65000 -> cmd_heart
  1, // 65001 -> cmd_rcode
  2, // 65002 -> cmd_security
};

const std::string& cmd_code_Name(
    cmd_code value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          cmd_code_entries,
          cmd_code_entries_by_number,
          3, cmd_code_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      cmd_code_entries,
      cmd_code_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     cmd_code_strings[idx].get();
}
bool cmd_code_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, cmd_code* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      cmd_code_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<cmd_code>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mycmd
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
