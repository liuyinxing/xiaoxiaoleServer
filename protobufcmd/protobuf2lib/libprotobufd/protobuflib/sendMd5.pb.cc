// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sendMd5.proto

#include "sendMd5.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace md5protobuf {
PROTOBUF_CONSTEXPR sc_send_Rcode::sc_send_Rcode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rcode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct sc_send_RcodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR sc_send_RcodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~sc_send_RcodeDefaultTypeInternal() {}
  union {
    sc_send_Rcode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 sc_send_RcodeDefaultTypeInternal _sc_send_Rcode_default_instance_;
PROTOBUF_CONSTEXPR cs_md5_security::cs_md5_security(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.md5_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.version_)*/0} {}
struct cs_md5_securityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR cs_md5_securityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~cs_md5_securityDefaultTypeInternal() {}
  union {
    cs_md5_security _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 cs_md5_securityDefaultTypeInternal _cs_md5_security_default_instance_;
}  // namespace md5protobuf
static ::_pb::Metadata file_level_metadata_sendMd5_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_sendMd5_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sendMd5_2eproto = nullptr;

const uint32_t TableStruct_sendMd5_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::md5protobuf::sc_send_Rcode, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::md5protobuf::sc_send_Rcode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::md5protobuf::sc_send_Rcode, _impl_.rcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::md5protobuf::cs_md5_security, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::md5protobuf::cs_md5_security, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::md5protobuf::cs_md5_security, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::md5protobuf::cs_md5_security, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::md5protobuf::cs_md5_security, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::md5protobuf::cs_md5_security, _impl_.md5_),
  1,
  2,
  3,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::md5protobuf::sc_send_Rcode)},
  { 8, 18, -1, sizeof(::md5protobuf::cs_md5_security)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::md5protobuf::_sc_send_Rcode_default_instance_._instance,
  &::md5protobuf::_cs_md5_security_default_instance_._instance,
};

const char descriptor_table_protodef_sendMd5_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rsendMd5.proto\022\013md5protobuf\"\036\n\rsc_send_"
  "Rcode\022\r\n\005rcode\030\001 \002(\t\"I\n\017cs_md5_security\022"
  "\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\017\n\007version\030\003 \002"
  "(\005\022\013\n\003md5\030\004 \002(\t*>\n\006mainId\022\017\n\tcmd_heart\020\340"
  "\324\003\022\017\n\tcmd_rcode\020\351\373\003\022\022\n\014cmd_security\020\352\373\003*"
  "9\n\010err_code\022\020\n\014versionError\020\001\022\014\n\010md5Erro"
  "r\020\002\022\r\n\ttypeError\020\003"
  ;
static ::_pbi::once_flag descriptor_table_sendMd5_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sendMd5_2eproto = {
    false, false, 258, descriptor_table_protodef_sendMd5_2eproto,
    "sendMd5.proto",
    &descriptor_table_sendMd5_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_sendMd5_2eproto::offsets,
    file_level_metadata_sendMd5_2eproto, file_level_enum_descriptors_sendMd5_2eproto,
    file_level_service_descriptors_sendMd5_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sendMd5_2eproto_getter() {
  return &descriptor_table_sendMd5_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sendMd5_2eproto(&descriptor_table_sendMd5_2eproto);
namespace md5protobuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* mainId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sendMd5_2eproto);
  return file_level_enum_descriptors_sendMd5_2eproto[0];
}
bool mainId_IsValid(int value) {
  switch (value) {
    case 60000:
    case 65001:
    case 65002:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* err_code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sendMd5_2eproto);
  return file_level_enum_descriptors_sendMd5_2eproto[1];
}
bool err_code_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class sc_send_Rcode::_Internal {
 public:
  using HasBits = decltype(std::declval<sc_send_Rcode>()._impl_._has_bits_);
  static void set_has_rcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

sc_send_Rcode::sc_send_Rcode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:md5protobuf.sc_send_Rcode)
}
sc_send_Rcode::sc_send_Rcode(const sc_send_Rcode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  sc_send_Rcode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rcode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rcode()) {
    _this->_impl_.rcode_.Set(from._internal_rcode(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:md5protobuf.sc_send_Rcode)
}

inline void sc_send_Rcode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rcode_){}
  };
  _impl_.rcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

sc_send_Rcode::~sc_send_Rcode() {
  // @@protoc_insertion_point(destructor:md5protobuf.sc_send_Rcode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void sc_send_Rcode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rcode_.Destroy();
}

void sc_send_Rcode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void sc_send_Rcode::Clear() {
// @@protoc_insertion_point(message_clear_start:md5protobuf.sc_send_Rcode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.rcode_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sc_send_Rcode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string rcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rcode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "md5protobuf.sc_send_Rcode.rcode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* sc_send_Rcode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md5protobuf.sc_send_Rcode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string rcode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rcode().data(), static_cast<int>(this->_internal_rcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "md5protobuf.sc_send_Rcode.rcode");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md5protobuf.sc_send_Rcode)
  return target;
}

size_t sc_send_Rcode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md5protobuf.sc_send_Rcode)
  size_t total_size = 0;

  // required string rcode = 1;
  if (_internal_has_rcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rcode());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData sc_send_Rcode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    sc_send_Rcode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*sc_send_Rcode::GetClassData() const { return &_class_data_; }


void sc_send_Rcode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<sc_send_Rcode*>(&to_msg);
  auto& from = static_cast<const sc_send_Rcode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:md5protobuf.sc_send_Rcode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rcode()) {
    _this->_internal_set_rcode(from._internal_rcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void sc_send_Rcode::CopyFrom(const sc_send_Rcode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md5protobuf.sc_send_Rcode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_send_Rcode::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void sc_send_Rcode::InternalSwap(sc_send_Rcode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rcode_, lhs_arena,
      &other->_impl_.rcode_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata sc_send_Rcode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sendMd5_2eproto_getter, &descriptor_table_sendMd5_2eproto_once,
      file_level_metadata_sendMd5_2eproto[0]);
}

// ===================================================================

class cs_md5_security::_Internal {
 public:
  using HasBits = decltype(std::declval<cs_md5_security>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_md5(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

cs_md5_security::cs_md5_security(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:md5protobuf.cs_md5_security)
}
cs_md5_security::cs_md5_security(const cs_md5_security& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  cs_md5_security* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.md5_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_md5()) {
    _this->_impl_.md5_.Set(from._internal_md5(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:md5protobuf.cs_md5_security)
}

inline void cs_md5_security::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.md5_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.version_){0}
  };
  _impl_.md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

cs_md5_security::~cs_md5_security() {
  // @@protoc_insertion_point(destructor:md5protobuf.cs_md5_security)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void cs_md5_security::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.md5_.Destroy();
}

void cs_md5_security::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void cs_md5_security::Clear() {
// @@protoc_insertion_point(message_clear_start:md5protobuf.cs_md5_security)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.md5_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.version_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cs_md5_security::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string md5 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_md5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "md5protobuf.cs_md5_security.md5");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* cs_md5_security::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md5protobuf.cs_md5_security)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // required int32 version = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_version(), target);
  }

  // required string md5 = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_md5().data(), static_cast<int>(this->_internal_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "md5protobuf.cs_md5_security.md5");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md5protobuf.cs_md5_security)
  return target;
}

size_t cs_md5_security::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:md5protobuf.cs_md5_security)
  size_t total_size = 0;

  if (_internal_has_md5()) {
    // required string md5 = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_md5());
  }

  if (_internal_has_id()) {
    // required int32 id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  if (_internal_has_type()) {
    // required int32 type = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  if (_internal_has_version()) {
    // required int32 version = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return total_size;
}
size_t cs_md5_security::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md5protobuf.cs_md5_security)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string md5 = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_md5());

    // required int32 id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());

    // required int32 type = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());

    // required int32 version = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData cs_md5_security::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    cs_md5_security::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*cs_md5_security::GetClassData() const { return &_class_data_; }


void cs_md5_security::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<cs_md5_security*>(&to_msg);
  auto& from = static_cast<const cs_md5_security&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:md5protobuf.cs_md5_security)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_md5(from._internal_md5());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void cs_md5_security::CopyFrom(const cs_md5_security& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md5protobuf.cs_md5_security)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_md5_security::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void cs_md5_security::InternalSwap(cs_md5_security* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.md5_, lhs_arena,
      &other->_impl_.md5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(cs_md5_security, _impl_.version_)
      + sizeof(cs_md5_security::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(cs_md5_security, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata cs_md5_security::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sendMd5_2eproto_getter, &descriptor_table_sendMd5_2eproto_once,
      file_level_metadata_sendMd5_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace md5protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::md5protobuf::sc_send_Rcode*
Arena::CreateMaybeMessage< ::md5protobuf::sc_send_Rcode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md5protobuf::sc_send_Rcode >(arena);
}
template<> PROTOBUF_NOINLINE ::md5protobuf::cs_md5_security*
Arena::CreateMaybeMessage< ::md5protobuf::cs_md5_security >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md5protobuf::cs_md5_security >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
