// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sendMd5.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sendMd5_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sendMd5_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sendMd5_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sendMd5_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sendMd5_2eproto;
namespace md5protobuf {
class cs_md5_security;
struct cs_md5_securityDefaultTypeInternal;
extern cs_md5_securityDefaultTypeInternal _cs_md5_security_default_instance_;
class sc_send_Rcode;
struct sc_send_RcodeDefaultTypeInternal;
extern sc_send_RcodeDefaultTypeInternal _sc_send_Rcode_default_instance_;
}  // namespace md5protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::md5protobuf::cs_md5_security* Arena::CreateMaybeMessage<::md5protobuf::cs_md5_security>(Arena*);
template<> ::md5protobuf::sc_send_Rcode* Arena::CreateMaybeMessage<::md5protobuf::sc_send_Rcode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace md5protobuf {

enum mainId : int {
  cmd_heart = 60000,
  cmd_rcode = 65001,
  cmd_security = 65002
};
bool mainId_IsValid(int value);
constexpr mainId mainId_MIN = cmd_heart;
constexpr mainId mainId_MAX = cmd_security;
constexpr int mainId_ARRAYSIZE = mainId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* mainId_descriptor();
template<typename T>
inline const std::string& mainId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, mainId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function mainId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    mainId_descriptor(), enum_t_value);
}
inline bool mainId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, mainId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<mainId>(
    mainId_descriptor(), name, value);
}
enum err_code : int {
  versionError = 1,
  md5Error = 2,
  typeError = 3
};
bool err_code_IsValid(int value);
constexpr err_code err_code_MIN = versionError;
constexpr err_code err_code_MAX = typeError;
constexpr int err_code_ARRAYSIZE = err_code_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* err_code_descriptor();
template<typename T>
inline const std::string& err_code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, err_code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function err_code_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    err_code_descriptor(), enum_t_value);
}
inline bool err_code_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, err_code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<err_code>(
    err_code_descriptor(), name, value);
}
// ===================================================================

class sc_send_Rcode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md5protobuf.sc_send_Rcode) */ {
 public:
  inline sc_send_Rcode() : sc_send_Rcode(nullptr) {}
  ~sc_send_Rcode() override;
  explicit PROTOBUF_CONSTEXPR sc_send_Rcode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sc_send_Rcode(const sc_send_Rcode& from);
  sc_send_Rcode(sc_send_Rcode&& from) noexcept
    : sc_send_Rcode() {
    *this = ::std::move(from);
  }

  inline sc_send_Rcode& operator=(const sc_send_Rcode& from) {
    CopyFrom(from);
    return *this;
  }
  inline sc_send_Rcode& operator=(sc_send_Rcode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const sc_send_Rcode& default_instance() {
    return *internal_default_instance();
  }
  static inline const sc_send_Rcode* internal_default_instance() {
    return reinterpret_cast<const sc_send_Rcode*>(
               &_sc_send_Rcode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(sc_send_Rcode& a, sc_send_Rcode& b) {
    a.Swap(&b);
  }
  inline void Swap(sc_send_Rcode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sc_send_Rcode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  sc_send_Rcode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<sc_send_Rcode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const sc_send_Rcode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const sc_send_Rcode& from) {
    sc_send_Rcode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sc_send_Rcode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md5protobuf.sc_send_Rcode";
  }
  protected:
  explicit sc_send_Rcode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRcodeFieldNumber = 1,
  };
  // required string rcode = 1;
  bool has_rcode() const;
  private:
  bool _internal_has_rcode() const;
  public:
  void clear_rcode();
  const std::string& rcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rcode();
  PROTOBUF_NODISCARD std::string* release_rcode();
  void set_allocated_rcode(std::string* rcode);
  private:
  const std::string& _internal_rcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rcode(const std::string& value);
  std::string* _internal_mutable_rcode();
  public:

  // @@protoc_insertion_point(class_scope:md5protobuf.sc_send_Rcode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rcode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sendMd5_2eproto;
};
// -------------------------------------------------------------------

class cs_md5_security final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md5protobuf.cs_md5_security) */ {
 public:
  inline cs_md5_security() : cs_md5_security(nullptr) {}
  ~cs_md5_security() override;
  explicit PROTOBUF_CONSTEXPR cs_md5_security(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  cs_md5_security(const cs_md5_security& from);
  cs_md5_security(cs_md5_security&& from) noexcept
    : cs_md5_security() {
    *this = ::std::move(from);
  }

  inline cs_md5_security& operator=(const cs_md5_security& from) {
    CopyFrom(from);
    return *this;
  }
  inline cs_md5_security& operator=(cs_md5_security&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const cs_md5_security& default_instance() {
    return *internal_default_instance();
  }
  static inline const cs_md5_security* internal_default_instance() {
    return reinterpret_cast<const cs_md5_security*>(
               &_cs_md5_security_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(cs_md5_security& a, cs_md5_security& b) {
    a.Swap(&b);
  }
  inline void Swap(cs_md5_security* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cs_md5_security* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  cs_md5_security* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<cs_md5_security>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const cs_md5_security& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const cs_md5_security& from) {
    cs_md5_security::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cs_md5_security* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md5protobuf.cs_md5_security";
  }
  protected:
  explicit cs_md5_security(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMd5FieldNumber = 4,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kVersionFieldNumber = 3,
  };
  // required string md5 = 4;
  bool has_md5() const;
  private:
  bool _internal_has_md5() const;
  public:
  void clear_md5();
  const std::string& md5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_md5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_md5();
  PROTOBUF_NODISCARD std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // required int32 type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // required int32 version = 3;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:md5protobuf.cs_md5_security)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
    int32_t id_;
    int32_t type_;
    int32_t version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sendMd5_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// sc_send_Rcode

// required string rcode = 1;
inline bool sc_send_Rcode::_internal_has_rcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool sc_send_Rcode::has_rcode() const {
  return _internal_has_rcode();
}
inline void sc_send_Rcode::clear_rcode() {
  _impl_.rcode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& sc_send_Rcode::rcode() const {
  // @@protoc_insertion_point(field_get:md5protobuf.sc_send_Rcode.rcode)
  return _internal_rcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void sc_send_Rcode::set_rcode(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.rcode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:md5protobuf.sc_send_Rcode.rcode)
}
inline std::string* sc_send_Rcode::mutable_rcode() {
  std::string* _s = _internal_mutable_rcode();
  // @@protoc_insertion_point(field_mutable:md5protobuf.sc_send_Rcode.rcode)
  return _s;
}
inline const std::string& sc_send_Rcode::_internal_rcode() const {
  return _impl_.rcode_.Get();
}
inline void sc_send_Rcode::_internal_set_rcode(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rcode_.Set(value, GetArenaForAllocation());
}
inline std::string* sc_send_Rcode::_internal_mutable_rcode() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.rcode_.Mutable(GetArenaForAllocation());
}
inline std::string* sc_send_Rcode::release_rcode() {
  // @@protoc_insertion_point(field_release:md5protobuf.sc_send_Rcode.rcode)
  if (!_internal_has_rcode()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.rcode_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rcode_.IsDefault()) {
    _impl_.rcode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void sc_send_Rcode::set_allocated_rcode(std::string* rcode) {
  if (rcode != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rcode_.SetAllocated(rcode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rcode_.IsDefault()) {
    _impl_.rcode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:md5protobuf.sc_send_Rcode.rcode)
}

// -------------------------------------------------------------------

// cs_md5_security

// required int32 id = 1;
inline bool cs_md5_security::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool cs_md5_security::has_id() const {
  return _internal_has_id();
}
inline void cs_md5_security::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t cs_md5_security::_internal_id() const {
  return _impl_.id_;
}
inline int32_t cs_md5_security::id() const {
  // @@protoc_insertion_point(field_get:md5protobuf.cs_md5_security.id)
  return _internal_id();
}
inline void cs_md5_security::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_ = value;
}
inline void cs_md5_security::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:md5protobuf.cs_md5_security.id)
}

// required int32 type = 2;
inline bool cs_md5_security::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool cs_md5_security::has_type() const {
  return _internal_has_type();
}
inline void cs_md5_security::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t cs_md5_security::_internal_type() const {
  return _impl_.type_;
}
inline int32_t cs_md5_security::type() const {
  // @@protoc_insertion_point(field_get:md5protobuf.cs_md5_security.type)
  return _internal_type();
}
inline void cs_md5_security::_internal_set_type(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}
inline void cs_md5_security::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:md5protobuf.cs_md5_security.type)
}

// required int32 version = 3;
inline bool cs_md5_security::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool cs_md5_security::has_version() const {
  return _internal_has_version();
}
inline void cs_md5_security::clear_version() {
  _impl_.version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t cs_md5_security::_internal_version() const {
  return _impl_.version_;
}
inline int32_t cs_md5_security::version() const {
  // @@protoc_insertion_point(field_get:md5protobuf.cs_md5_security.version)
  return _internal_version();
}
inline void cs_md5_security::_internal_set_version(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.version_ = value;
}
inline void cs_md5_security::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:md5protobuf.cs_md5_security.version)
}

// required string md5 = 4;
inline bool cs_md5_security::_internal_has_md5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool cs_md5_security::has_md5() const {
  return _internal_has_md5();
}
inline void cs_md5_security::clear_md5() {
  _impl_.md5_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& cs_md5_security::md5() const {
  // @@protoc_insertion_point(field_get:md5protobuf.cs_md5_security.md5)
  return _internal_md5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void cs_md5_security::set_md5(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.md5_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:md5protobuf.cs_md5_security.md5)
}
inline std::string* cs_md5_security::mutable_md5() {
  std::string* _s = _internal_mutable_md5();
  // @@protoc_insertion_point(field_mutable:md5protobuf.cs_md5_security.md5)
  return _s;
}
inline const std::string& cs_md5_security::_internal_md5() const {
  return _impl_.md5_.Get();
}
inline void cs_md5_security::_internal_set_md5(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.md5_.Set(value, GetArenaForAllocation());
}
inline std::string* cs_md5_security::_internal_mutable_md5() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.md5_.Mutable(GetArenaForAllocation());
}
inline std::string* cs_md5_security::release_md5() {
  // @@protoc_insertion_point(field_release:md5protobuf.cs_md5_security.md5)
  if (!_internal_has_md5()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.md5_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.md5_.IsDefault()) {
    _impl_.md5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void cs_md5_security::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.md5_.SetAllocated(md5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.md5_.IsDefault()) {
    _impl_.md5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:md5protobuf.cs_md5_security.md5)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace md5protobuf

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::md5protobuf::mainId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::md5protobuf::mainId>() {
  return ::md5protobuf::mainId_descriptor();
}
template <> struct is_proto_enum< ::md5protobuf::err_code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::md5protobuf::err_code>() {
  return ::md5protobuf::err_code_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sendMd5_2eproto
